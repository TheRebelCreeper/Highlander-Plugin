/* Plugin Template generated by Pawn Studio */

#include <sourcemod>

public Plugin:myinfo = 
{
	name = "Highlander Tools",
	author = "Rebel",
	description = "Puts people on the right team for Highlander",
	version = "1.0",
	url = "http://www.sourcemod.net/"
}

public OnPluginStart()
{
	RegAdminCmd("sm_move", Command_SetTeam, ADMFLAG_CHANGEMAP);
	RegAdminCmd("sm_reload", Command_ReloadMap, ADMFLAG_CONFIG);
}

public Action Command_SetTeam(int client, int args)
{
	if (args < 1 || args > 2)
	{
		ReplyToCommand(client, "[SM] Usage: sm_move <name> [team]");
	}
	else
	{
		if (args == 1)
		{
			char name[32];
			GetCmdArg(1, name, sizeof(name));
			new target = FindTarget(0, name, false, false);
			
			if (target > -1 && IsClientInGame(target))
			{
				if (GetClientTeam(target) == 1)
				{
					ReplyToCommand(client, "[SM] Cannot move players in spectator.");
				}
				else if (GetClientTeam(target) == 2)
				{
					ReplyToCommand(client, "[SM] %N was moved to Blue.", target);
					ReplyToCommand(target, "[SM] You were moved to Blue by %N.", client);
					ChangeClientTeam(target, 3);
				}
				else if (GetClientTeam(target) == 3)
				{
					ReplyToCommand(client, "[SM] %N was moved to Red.", target);
					ReplyToCommand(target, "[SM] You were moved to Red by %N.", client);
					ChangeClientTeam(target, 2);
				}
			}
		}
		else
		{
			char name[32];
			char team[32];
			GetCmdArg(1, name, sizeof(name));
			GetCmdArg(2, team, sizeof(team));
			new target = FindTarget(0, name, false, false);
			
			if (target > -1 && IsClientInGame(target))
			{
				if (StrContains(team, "red", false) == 0)
				{
					ReplyToCommand(client, "[SM] %N was moved to Red.", target);
					ReplyToCommand(target, "[SM] You were moved to Red by %N.", client);
					ChangeClientTeam(target, 2);
				}
				else if (StrContains(team, "blu", false) == 0)
				{
					ReplyToCommand(client, "[SM] %N was moved to Blue.", target);
					ReplyToCommand(target, "[SM] You were moved to Blue by %N.", client);
					ChangeClientTeam(target, 3);
				}
				else if (StrContains(team, "spec", false) == 0)
				{
					ReplyToCommand(client, "[SM] %N was moved to spectator.", target);
					ReplyToCommand(target, "[SM] You were moved to spectator by %N.", client);
					ChangeClientTeam(target, 1);
				}
				else
				{
					ReplyToCommand(client, "[SM] Invalid team: %s", team);
				}
			}
		}
	}
	return Plugin_Handled;
}

public Action Command_ReloadMap(int client, int args)
{
	if (args > 0)
	{
		ReplyToCommand(client, "[SM] Usage: sm_reload");
	}
	else
	{
		char mapName[128];
		GetCurrentMap(mapName, sizeof(mapName));
		if (IsMapValid(mapName))
		{
			DataPack pack = new DataPack();
			pack.WriteString(mapName);
			PrintToChatAll("[SM] Reloading map in 15 seconds!");
			CreateTimer(15.0, Timer_ChangeMap, pack);
		}
		else
		{
			ReplyToCommand(client, "[SM] Invalid map name.");
		}
	}
	return Plugin_Handled;
}

public Action Timer_ChangeMap(Handle timer, Handle pack)
{
	char mapName[128];
	ResetPack(pack);
	ReadPackString(pack, mapName, sizeof(mapName));
	ForceChangeLevel(mapName, "UGC Configs");
	return Plugin_Stop;
}